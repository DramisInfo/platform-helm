name: CI

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: self-hosted
    name: Build and Test
    permissions:
      contents: write
      issues: write
      pull-requests: write
      statuses: write
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Verify Helm installation
        run: helm version

      - name: Install helm-unittest plugin
        run: |
          helm plugin list | grep "unittest"
          if ! helm plugin list | grep -q "unittest"; then
              helm plugin install https://github.com/quintush/helm-unittest
          else
              echo "Helm unittest plugin is already installed."
          fi

      - name: Lint Helm chart
        run: helm lint ./platform-core

      - name: Run Helm tests
        run: helm unittest ./platform-core

      # - name: Package Helm chart
      #   run: helm package ./platform-core --version ${{ steps.calver.outputs.version }} --app-version ${{ steps.calver.outputs.version }}

      # - name: Publish Helm chart
      #   env:
      #     HELM_REPO_URL: ${{ secrets.HELM_REPO_URL }}
      #     HELM_REPO_USERNAME: ${{ secrets.HELM_REPO_USERNAME }}
      #     HELM_REPO_PASSWORD: ${{ secrets.HELM_REPO_PASSWORD }}
      #   run: |
      #     export HELM_EXPERIMENTAL_OCI=1
      #     echo $HELM_REPO_PASSWORD | helm registry login harbor.platform.dramisinfo.com --username $HELM_REPO_USERNAME --password-stdin
      #     helm push ./platform-core-*.tgz $HELM_REPO_URL
  release:
    runs-on: self-hosted
    name: Release
    needs: test
    permissions:
      contents: write
      issues: write
      pull-requests: write
      statuses: write
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm clean-install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Retrieve version
        id: get_version
        run: echo "VERSION=$(cat .version)" >> $GITHUB_ENV

      - name: Print version
        run: echo "The released version is ${{ env.VERSION }}"

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Verify Helm installation
        run: helm version

      - name: Package Helm chart
        run: helm package ./platform-core --version ${{ env.VERSION }} --app-version ${{ env.VERSION }}

      - name: Publish Helm chart
        env:
          HELM_REPO_URL: ${{ secrets.HELM_REPO_URL }}
          HELM_REPO_USERNAME: ${{ secrets.HELM_REPO_USERNAME }}
          HELM_REPO_PASSWORD: ${{ secrets.HELM_REPO_PASSWORD }}
        run: |
          export HELM_EXPERIMENTAL_OCI=1
          echo $HELM_REPO_PASSWORD | helm registry login harbor.platform.dramisinfo.com --username $HELM_REPO_USERNAME --password-stdin
          helm push ./platform-core-*.tgz $HELM_REPO_URL
  update-git:
    runs-on: self-hosted
    name: Update Git
    needs: release
    permissions:
      contents: write
      issues: write
      pull-requests: write
      statuses: write
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
