version: "3"

tasks:
  install-prerequisites:
    description: Install kubectl, helm, docker, k3d
    silent: true
    cmds:
      - |
        # Install kubectl
        if ! command -v kubectl &> /dev/null; then
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        fi
      - |
        # Install helm
        if ! command -v helm &> /dev/null; then
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        fi
        helm version
      - |
        # Install Docker
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          sudo usermod -aG docker $USER
          newgrp docker
        fi
      - |
        # Install k3d
        if ! command -v k3d &> /dev/null; then
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        fi

  delete-cluster:
    description: Delete k3d cluster
    silent: true
    cmds:
      - k3d cluster delete ci-cluster

  create-cluster:
    description: Create k3d cluster
    silent: true
    cmds:
      - |
        # Create cluster if it doesn't already exist
        if ! k3d cluster list | grep -q ci-cluster; then
          k3d cluster create ci-cluster --config k3d-config.yaml --wait
        fi



  helm-lint:
    description: Lint helm charts
    silent: true
    cmds:
      - helm lint platform-core

  create-namespaces:
    description: Create namespaces
    silent: true
    cmds:
      - kubectl apply -f namespaces

  helm-dry-run:
    description: Run helm install --dry-run
    silent: true
    cmds:
      - helm install --dry-run platform-core platform-core > .helm-dry-run

  argocd-install:
    description: Install ArgoCD
    silent: true
    cmds:
      - |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        helm repo add argo https://argoproj.github.io/argo-helm
        helm upgrade --install argocd argo/argo-cd -n argocd --wait -f argocd-custom-values.yaml

  cert-manager-install:
    description: Install cert-manager
    silent: true
    cmds:
      - |
        kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        helm upgrade --install cert-manager jetstack/cert-manager \
          --namespace cert-manager \
          --set installCRDs=true \
          --wait

  helm-install:
    description: Install helm chart
    silent: true
    cmds:
      - helm upgrade --install platform-core platform-core

  package-chart:
    description: Package helm chart
    silent: true
    cmds:
      - rm -f platform-core-*.tgz
      - helm package platform-core

  run-k9s:
    description: Run k9s
    silent: true
    cmds:
      - |
        if command -v wt.exe &> /dev/null; then
          wt.exe -w 0 nt -p "Ubuntu" -- wsl.exe -d Ubuntu-22.04 -- /home/linuxbrew/.linuxbrew/bin/k9s --command pods --all-namespaces --headless
        fi
  create-argoapp:
    description: Create ArgoCD application
    silent: true
    cmds:
      - |
        cat <<EOF | kubectl -n argocd delete -f - || true
        ---
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: platform-tools
          namespace: argocd
        EOF

      - |
        cat <<EOF | kubectl -n argocd apply -f -
        ---
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: platform-tools
          namespace: argocd
          finalizers:
            - resources-finalizer.argocd.argoproj.io
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true    
        spec:
          destination:
            namespace: platform-tools
            server: "https://kubernetes.default.svc"
          project: default
          source:
            repoURL: "https://github.com/DramisInfo/platform-helm.git"
            targetRevision: "HEAD"  # Use specific tag like v0.2.51 for production
            path: platform-core
            helm:
              valuesObject:
                global:
                  clusterName: "dev"
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
              - CreateNamespace=true
              - SkipHooks=true
              - Timeout=600
              - Validate=false
              - Wait=true
              - PruneEmpty=true
        EOF

  wait-for-argo-apps:
    description: Wait for ArgoCD applications to sync
    silent: true
    cmds:
      - |
        ./argo-wait-apps.sh
  ci:
    cmds:
      - task: install-prerequisites
      - task: helm-lint
      - task: create-cluster
      - task: argocd-install
      - task: cert-manager-install
      - task: create-argoapp
      - task: wait-for-argo-apps
      - task: delete-cluster
      - task: package-chart

  init:
    cmds:
      - task: helm-lint
      - task: create-cluster
      - task: argocd-install
      - task: cert-manager-install
      - task: create-argoapp
      - task: wait-for-argo-apps
