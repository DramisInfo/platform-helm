version: "3"

tasks:
  install-prerequisites:
    silent: true
    cmds:
      - |
        # Install kubectl
        if ! command -v kubectl &> /dev/null; then
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        fi
      - |
        # Install helm
        if ! command -v helm &> /dev/null; then
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        fi
      - |
        # Install Docker
        if ! command -v docker &> /dev/null; then
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          sudo usermod -aG docker $USER
          newgrp docker
        fi
      - |
        # Install k3d
        if ! command -v k3d &> /dev/null; then
          curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        fi

  delete-cluster:
    cmds:
      - k3d cluster delete ci-cluster

  create-cluster:
    cmds:
      - |
        # Create cluster if it doesn't already exist
        if ! k3d cluster list | grep -q ci-cluster; then
          k3d cluster create ci-cluster --config k3d-config.yaml --wait
        fi

  helm-dependency-update:
    cmds:
      - helm dependency update platform-core
      - for dir in $(find platform-core/charts/ -maxdepth 1 -mindepth 1 -type d); do helm dependency update $dir; done

  helm-lint:
    cmds:
      - helm lint platform-core

  create-namespaces:
    cmds:
      - kubectl apply -f namespaces

  helm-dry-run:
    cmds:
      - helm install --dry-run platform-core platform-core > .helm-dry-run

  argocd-install:
    cmds:
      - |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        helm repo add argo https://argoproj.github.io/argo-helm
        helm upgrade --install argocd argo/argo-cd -n argocd --wait -f argocd-custom-values.yaml

  helm-install:
    cmds:
      - helm upgrade --install platform-core platform-core

  increment-chart-version:
    cmds:
      - |
        #!/bin/bash
        CHART_FILE="platform-core/Chart.yaml"
        VERSION=$(grep '^version:' $CHART_FILE | awk '{print $2}')
        VERSION_PARTS=(${VERSION//./ })
        PATCH_VERSION=$((VERSION_PARTS[2] + 1))
        NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"
        sed -i "s/^version: .*/version: $NEW_VERSION/" $CHART_FILE
        echo "Updated chart version to $NEW_VERSION"

  package-chart:
    cmds:
      - rm -f platform-core-*.tgz
      - helm package platform-core

  run-k9s:
    cmds:
      - |
        if command -v wt.exe &> /dev/null; then
          wt.exe -w 0 -p "Ubuntu" -- wsl.exe -d Ubuntu -- /home/linuxbrew/.linuxbrew/bin/k9s --command pods --all-namespaces --headless
        fi

  ci:
    cmds:
      - task: install-prerequisites
      - task: delete-cluster
      - task: ci-local

  ci-local:
    cmds:
      - task helm-dependency-update
      - task helm-lint
      - task create-cluster
      - task run-k9s
      - task argocd-install
      - task helm-dry-run
      - task create-namespaces
      - task helm-install
      - task increment-chart-version
      - task package-chart
      - kubectl get pods --all-namespaces
